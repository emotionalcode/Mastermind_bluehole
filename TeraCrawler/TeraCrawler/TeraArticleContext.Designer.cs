//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2014-07-22 오전 10:41:55
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DataContext
{

    [DatabaseAttribute(Name = "mastermind")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class TeraDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(TeraDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertArticle(Article instance);
        partial void UpdateArticle(Article instance);
        partial void DeleteArticle(Article instance);
        partial void InsertComments(Comments instance);
        partial void UpdateComments(Comments instance);
        partial void DeleteComments(Comments instance);
        partial void InsertLog(Log instance);
        partial void UpdateLog(Log instance);
        partial void DeleteLog(Log instance);

        #endregion

        public TeraDataContext() :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public TeraDataContext(MappingSource mappingSource) :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public TeraDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public TeraDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public TeraDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public TeraDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Article> Articles
        {
            get
            {
                return this.GetTable<Article>();
            }
        }

        public Devart.Data.Linq.Table<Comments> Comments
        {
            get
            {
                return this.GetTable<Comments>();
            }
        }

        public Devart.Data.Linq.Table<Log> Logs
        {
            get
            {
                return this.GetTable<Log>();
            }
        }
    }
}

namespace DataContext
{

    /// <summary>
    /// There are no comments for DataContext.Article in the schema.
    /// </summary>
    [Table(Name = @"mastermind.Articles")]
    public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ArticleId;

        private Games _Game;

        private TargetSites _TargetSite;

        private string _Link;

        private string _RawHtml;

        private System.DateTime _CrawledTime;

        private string _Author;

        private string _Title;

        private string _ContentHtml;

        private System.Nullable<System.DateTime> _ArticleWrittenTime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnArticleIdChanging(int value);
        partial void OnArticleIdChanged();
        partial void OnGameChanging(Games value);
        partial void OnGameChanged();
        partial void OnTargetSiteChanging(TargetSites value);
        partial void OnTargetSiteChanged();
        partial void OnLinkChanging(string value);
        partial void OnLinkChanged();
        partial void OnRawHtmlChanging(string value);
        partial void OnRawHtmlChanged();
        partial void OnCrawledTimeChanging(System.DateTime value);
        partial void OnCrawledTimeChanged();
        partial void OnAuthorChanging(string value);
        partial void OnAuthorChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnContentHtmlChanging(string value);
        partial void OnContentHtmlChanged();
        partial void OnArticleWrittenTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnArticleWrittenTimeChanged();
        #endregion

        public Article()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ArticleId in the schema.
        /// </summary>
        [Column(Storage = "_ArticleId", CanBeNull = false, DbType = "int(9) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ArticleId
        {
            get
            {
                return this._ArticleId;
            }
            set
            {
                if (this._ArticleId != value)
                {
                    this.OnArticleIdChanging(value);
                    this.SendPropertyChanging();
                    this._ArticleId = value;
                    this.SendPropertyChanged("ArticleId");
                    this.OnArticleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [Column(Storage = "_Game", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public Games Game
        {
            get
            {
                return this._Game;
            }
            set
            {
                if (this._Game != value)
                {
                    this.OnGameChanging(value);
                    this.SendPropertyChanging();
                    this._Game = value;
                    this.SendPropertyChanged("Game");
                    this.OnGameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TargetSite in the schema.
        /// </summary>
        [Column(Storage = "_TargetSite", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public TargetSites TargetSite
        {
            get
            {
                return this._TargetSite;
            }
            set
            {
                if (this._TargetSite != value)
                {
                    this.OnTargetSiteChanging(value);
                    this.SendPropertyChanging();
                    this._TargetSite = value;
                    this.SendPropertyChanged("TargetSite");
                    this.OnTargetSiteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Link in the schema.
        /// </summary>
        [Column(Storage = "_Link", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Link
        {
            get
            {
                return this._Link;
            }
            set
            {
                if (this._Link != value)
                {
                    this.OnLinkChanging(value);
                    this.SendPropertyChanging();
                    this._Link = value;
                    this.SendPropertyChanged("Link");
                    this.OnLinkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RawHtml in the schema.
        /// </summary>
        [Column(Storage = "_RawHtml", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RawHtml
        {
            get
            {
                return this._RawHtml;
            }
            set
            {
                if (this._RawHtml != value)
                {
                    this.OnRawHtmlChanging(value);
                    this.SendPropertyChanging();
                    this._RawHtml = value;
                    this.SendPropertyChanged("RawHtml");
                    this.OnRawHtmlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CrawledTime in the schema.
        /// </summary>
        [Column(Storage = "_CrawledTime", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime CrawledTime
        {
            get
            {
                return this._CrawledTime;
            }
            set
            {
                if (this._CrawledTime != value)
                {
                    this.OnCrawledTimeChanging(value);
                    this.SendPropertyChanging();
                    this._CrawledTime = value;
                    this.SendPropertyChanged("CrawledTime");
                    this.OnCrawledTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Author in the schema.
        /// </summary>
        [Column(Storage = "_Author", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string Author
        {
            get
            {
                return this._Author;
            }
            set
            {
                if (this._Author != value)
                {
                    this.OnAuthorChanging(value);
                    this.SendPropertyChanging();
                    this._Author = value;
                    this.SendPropertyChanged("Author");
                    this.OnAuthorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Storage = "_Title", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContentHtml in the schema.
        /// </summary>
        [Column(Storage = "_ContentHtml", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string ContentHtml
        {
            get
            {
                return this._ContentHtml;
            }
            set
            {
                if (this._ContentHtml != value)
                {
                    this.OnContentHtmlChanging(value);
                    this.SendPropertyChanging();
                    this._ContentHtml = value;
                    this.SendPropertyChanged("ContentHtml");
                    this.OnContentHtmlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ArticleWrittenTime in the schema.
        /// </summary>
        [Column(Storage = "_ArticleWrittenTime", DbType = "datetime NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ArticleWrittenTime
        {
            get
            {
                return this._ArticleWrittenTime;
            }
            set
            {
                if (this._ArticleWrittenTime != value)
                {
                    this.OnArticleWrittenTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ArticleWrittenTime = value;
                    this.SendPropertyChanged("ArticleWrittenTime");
                    this.OnArticleWrittenTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataContext.Comments in the schema.
    /// </summary>
    [Table(Name = @"mastermind.Comments")]
    public partial class Comments : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CommentId;

        private System.Nullable<int> _ParentCommentId;

        private int _ArticleId;

        private string _Author;

        private string _ContentHtml;

        private System.Nullable<System.DateTime> _CommentWrittenTime;

        private System.Nullable<int> _LikeCount;

        private System.Nullable<int> _DislikeCount;
        #pragma warning restore 0649

        private EntityRef<Article> _CommentsToArticle;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCommentIdChanging(int value);
        partial void OnCommentIdChanged();
        partial void OnParentCommentIdChanging(System.Nullable<int> value);
        partial void OnParentCommentIdChanged();
        partial void OnArticleIdChanging(int value);
        partial void OnArticleIdChanged();
        partial void OnAuthorChanging(string value);
        partial void OnAuthorChanged();
        partial void OnContentHtmlChanging(string value);
        partial void OnContentHtmlChanged();
        partial void OnCommentWrittenTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnCommentWrittenTimeChanged();
        partial void OnLikeCountChanging(System.Nullable<int> value);
        partial void OnLikeCountChanged();
        partial void OnDislikeCountChanging(System.Nullable<int> value);
        partial void OnDislikeCountChanged();
        #endregion

        public Comments()
        {
            this._CommentsToArticle  = default(EntityRef<Article>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CommentId in the schema.
        /// </summary>
        [Column(Storage = "_CommentId", CanBeNull = false, DbType = "int(9) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CommentId
        {
            get
            {
                return this._CommentId;
            }
            set
            {
                if (this._CommentId != value)
                {
                    this.OnCommentIdChanging(value);
                    this.SendPropertyChanging();
                    this._CommentId = value;
                    this.SendPropertyChanged("CommentId");
                    this.OnCommentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentCommentId in the schema.
        /// </summary>
        [Column(Storage = "_ParentCommentId", DbType = "int(9) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ParentCommentId
        {
            get
            {
                return this._ParentCommentId;
            }
            set
            {
                if (this._ParentCommentId != value)
                {
                    this.OnParentCommentIdChanging(value);
                    this.SendPropertyChanging();
                    this._ParentCommentId = value;
                    this.SendPropertyChanged("ParentCommentId");
                    this.OnParentCommentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ArticleId in the schema.
        /// </summary>
        [Column(Storage = "_ArticleId", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ArticleId
        {
            get
            {
                return this._ArticleId;
            }
            set
            {
                if (this._ArticleId != value)
                {
                    if (this._CommentsToArticle.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnArticleIdChanging(value);
                    this.SendPropertyChanging();
                    this._ArticleId = value;
                    this.SendPropertyChanged("ArticleId");
                    this.OnArticleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Author in the schema.
        /// </summary>
        [Column(Storage = "_Author", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string Author
        {
            get
            {
                return this._Author;
            }
            set
            {
                if (this._Author != value)
                {
                    this.OnAuthorChanging(value);
                    this.SendPropertyChanging();
                    this._Author = value;
                    this.SendPropertyChanged("Author");
                    this.OnAuthorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContentHtml in the schema.
        /// </summary>
        [Column(Storage = "_ContentHtml", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string ContentHtml
        {
            get
            {
                return this._ContentHtml;
            }
            set
            {
                if (this._ContentHtml != value)
                {
                    this.OnContentHtmlChanging(value);
                    this.SendPropertyChanging();
                    this._ContentHtml = value;
                    this.SendPropertyChanged("ContentHtml");
                    this.OnContentHtmlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommentWrittenTime in the schema.
        /// </summary>
        [Column(Storage = "_CommentWrittenTime", DbType = "datetime NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> CommentWrittenTime
        {
            get
            {
                return this._CommentWrittenTime;
            }
            set
            {
                if (this._CommentWrittenTime != value)
                {
                    this.OnCommentWrittenTimeChanging(value);
                    this.SendPropertyChanging();
                    this._CommentWrittenTime = value;
                    this.SendPropertyChanged("CommentWrittenTime");
                    this.OnCommentWrittenTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LikeCount in the schema.
        /// </summary>
        [Column(Storage = "_LikeCount", DbType = "int(9) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> LikeCount
        {
            get
            {
                return this._LikeCount;
            }
            set
            {
                if (this._LikeCount != value)
                {
                    this.OnLikeCountChanging(value);
                    this.SendPropertyChanging();
                    this._LikeCount = value;
                    this.SendPropertyChanged("LikeCount");
                    this.OnLikeCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DislikeCount in the schema.
        /// </summary>
        [Column(Storage = "_DislikeCount", DbType = "int(9) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DislikeCount
        {
            get
            {
                return this._DislikeCount;
            }
            set
            {
                if (this._DislikeCount != value)
                {
                    this.OnDislikeCountChanging(value);
                    this.SendPropertyChanging();
                    this._DislikeCount = value;
                    this.SendPropertyChanged("DislikeCount");
                    this.OnDislikeCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommentsToArticle in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Article_Comments", Storage="_CommentsToArticle", ThisKey="ArticleId", OtherKey="ArticleId", IsForeignKey=true)]
        public Article CommentsToArticle
        {
            get
            {
                return this._CommentsToArticle.Entity;
            }
            set
            {
                Article previousValue = this._CommentsToArticle.Entity;
                if ((previousValue != value) || (this._CommentsToArticle.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CommentsToArticle.Entity = null;
                    }
                    this._CommentsToArticle.Entity = value;
                    if (value != null)
                    {
                        this._ArticleId = value.ArticleId;
                    }
                    else
                    {
                        this._ArticleId = default(int);
                    }
                    this.SendPropertyChanged("CommentsToArticle");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataContext.Log in the schema.
    /// </summary>
    [Table(Name = @"mastermind.Logs")]
    public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LogId;

        private System.DateTime _TimeStamp;

        private LogType _LogType;

        private string _Message;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLogIdChanging(int value);
        partial void OnLogIdChanged();
        partial void OnTimeStampChanging(System.DateTime value);
        partial void OnTimeStampChanged();
        partial void OnLogTypeChanging(LogType value);
        partial void OnLogTypeChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        #endregion

        public Log()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LogId in the schema.
        /// </summary>
        [Column(Storage = "_LogId", CanBeNull = false, DbType = "int(9) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int LogId
        {
            get
            {
                return this._LogId;
            }
            set
            {
                if (this._LogId != value)
                {
                    this.OnLogIdChanging(value);
                    this.SendPropertyChanging();
                    this._LogId = value;
                    this.SendPropertyChanged("LogId");
                    this.OnLogIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TimeStamp in the schema.
        /// </summary>
        [Column(Name = @"`TimeStamp`", Storage = "_TimeStamp", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime TimeStamp
        {
            get
            {
                return this._TimeStamp;
            }
            set
            {
                if (this._TimeStamp != value)
                {
                    this.OnTimeStampChanging(value);
                    this.SendPropertyChanging();
                    this._TimeStamp = value;
                    this.SendPropertyChanged("TimeStamp");
                    this.OnTimeStampChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LogType in the schema.
        /// </summary>
        [Column(Storage = "_LogType", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public LogType LogType
        {
            get
            {
                return this._LogType;
            }
            set
            {
                if (this._LogType != value)
                {
                    this.OnLogTypeChanging(value);
                    this.SendPropertyChanging();
                    this._LogType = value;
                    this.SendPropertyChanged("LogType");
                    this.OnLogTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Message in the schema.
        /// </summary>
        [Column(Storage = "_Message", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.OnMessageChanging(value);
                    this.SendPropertyChanging();
                    this._Message = value;
                    this.SendPropertyChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}

namespace DataContext
{

    /// <summary>
    /// There are no comments for TargetSites in the schema.
    /// </summary>
    public enum TargetSites : int
    {
    
        /// <summary>
        /// There are no comments for TargetSites.hangame in the schema.
        /// </summary>
        hangame,    
        /// <summary>
        /// There are no comments for TargetSites.inven in the schema.
        /// </summary>
        inven,    
        /// <summary>
        /// There are no comments for TargetSites.thisisgame in the schema.
        /// </summary>
        thisisgame,    
        /// <summary>
        /// There are no comments for TargetSites.gamemeca in the schema.
        /// </summary>
        gamemeca,    
        /// <summary>
        /// There are no comments for TargetSites.naver in the schema.
        /// </summary>
        naver
    }

    /// <summary>
    /// There are no comments for Games in the schema.
    /// </summary>
    public enum Games : int
    {
    
        /// <summary>
        /// There are no comments for Games.tera in the schema.
        /// </summary>
        tera
    }

    /// <summary>
    /// There are no comments for LogType in the schema.
    /// </summary>
    public enum LogType : int
    {
    
        /// <summary>
        /// There are no comments for LogType.Info in the schema.
        /// </summary>
        Info,    
        /// <summary>
        /// There are no comments for LogType.Exception in the schema.
        /// </summary>
        Exception
    }

}
