//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2014-07-15 오후 2:14:32
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DataContext
{

    [DatabaseAttribute(Name = "mastermind")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class TeraDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(TeraDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertArticle(Article instance);
        partial void UpdateArticle(Article instance);
        partial void DeleteArticle(Article instance);
        partial void InsertSection(Section instance);
        partial void UpdateSection(Section instance);
        partial void DeleteSection(Section instance);

        #endregion

        public TeraDataContext() :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public TeraDataContext(MappingSource mappingSource) :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public TeraDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public TeraDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public TeraDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public TeraDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Article> Articles
        {
            get
            {
                return this.GetTable<Article>();
            }
        }

        public Devart.Data.Linq.Table<Section> Sections
        {
            get
            {
                return this.GetTable<Section>();
            }
        }
    }
}

namespace DataContext
{

    /// <summary>
    /// There are no comments for DataContext.Article in the schema.
    /// </summary>
    [Table(Name = @"mastermind.Articles")]
    public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ArticleId;

        private System.DateTime _CrawledTime;

        private string _Author;

        private string _Title;

        private string _RawHtml;

        private string _ContentHtml;

        private string _ArticleWrittenTime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnArticleIdChanging(int value);
        partial void OnArticleIdChanged();
        partial void OnCrawledTimeChanging(System.DateTime value);
        partial void OnCrawledTimeChanged();
        partial void OnAuthorChanging(string value);
        partial void OnAuthorChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnRawHtmlChanging(string value);
        partial void OnRawHtmlChanged();
        partial void OnContentHtmlChanging(string value);
        partial void OnContentHtmlChanged();
        partial void OnArticleWrittenTimeChanging(string value);
        partial void OnArticleWrittenTimeChanged();
        #endregion

        public Article()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ArticleId in the schema.
        /// </summary>
        [Column(Storage = "_ArticleId", CanBeNull = false, DbType = "int(9) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ArticleId
        {
            get
            {
                return this._ArticleId;
            }
            set
            {
                if (this._ArticleId != value)
                {
                    this.OnArticleIdChanging(value);
                    this.SendPropertyChanging();
                    this._ArticleId = value;
                    this.SendPropertyChanged("ArticleId");
                    this.OnArticleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CrawledTime in the schema.
        /// </summary>
        [Column(Storage = "_CrawledTime", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime CrawledTime
        {
            get
            {
                return this._CrawledTime;
            }
            set
            {
                if (this._CrawledTime != value)
                {
                    this.OnCrawledTimeChanging(value);
                    this.SendPropertyChanging();
                    this._CrawledTime = value;
                    this.SendPropertyChanged("CrawledTime");
                    this.OnCrawledTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Author in the schema.
        /// </summary>
        [Column(Storage = "_Author", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Author
        {
            get
            {
                return this._Author;
            }
            set
            {
                if (this._Author != value)
                {
                    this.OnAuthorChanging(value);
                    this.SendPropertyChanging();
                    this._Author = value;
                    this.SendPropertyChanged("Author");
                    this.OnAuthorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Storage = "_Title", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RawHtml in the schema.
        /// </summary>
        [Column(Storage = "_RawHtml", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RawHtml
        {
            get
            {
                return this._RawHtml;
            }
            set
            {
                if (this._RawHtml != value)
                {
                    this.OnRawHtmlChanging(value);
                    this.SendPropertyChanging();
                    this._RawHtml = value;
                    this.SendPropertyChanged("RawHtml");
                    this.OnRawHtmlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContentHtml in the schema.
        /// </summary>
        [Column(Storage = "_ContentHtml", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ContentHtml
        {
            get
            {
                return this._ContentHtml;
            }
            set
            {
                if (this._ContentHtml != value)
                {
                    this.OnContentHtmlChanging(value);
                    this.SendPropertyChanging();
                    this._ContentHtml = value;
                    this.SendPropertyChanged("ContentHtml");
                    this.OnContentHtmlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ArticleWrittenTime in the schema.
        /// </summary>
        [Column(Storage = "_ArticleWrittenTime", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ArticleWrittenTime
        {
            get
            {
                return this._ArticleWrittenTime;
            }
            set
            {
                if (this._ArticleWrittenTime != value)
                {
                    this.OnArticleWrittenTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ArticleWrittenTime = value;
                    this.SendPropertyChanged("ArticleWrittenTime");
                    this.OnArticleWrittenTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataContext.Section in the schema.
    /// </summary>
    [Table(Name = @"mastermind.Sections")]
    public partial class Section : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _SectionId;

        private string _Name;

        private string _Test;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSectionIdChanging(int value);
        partial void OnSectionIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTestChanging(string value);
        partial void OnTestChanged();
        #endregion

        public Section()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SectionId in the schema.
        /// </summary>
        [Column(Storage = "_SectionId", CanBeNull = false, DbType = "int(9) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int SectionId
        {
            get
            {
                return this._SectionId;
            }
            set
            {
                if (this._SectionId != value)
                {
                    this.OnSectionIdChanging(value);
                    this.SendPropertyChanging();
                    this._SectionId = value;
                    this.SendPropertyChanged("SectionId");
                    this.OnSectionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Test in the schema.
        /// </summary>
        [Column(Storage = "_Test", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Test
        {
            get
            {
                return this._Test;
            }
            set
            {
                if (this._Test != value)
                {
                    this.OnTestChanging(value);
                    this.SendPropertyChanging();
                    this._Test = value;
                    this.SendPropertyChanged("Test");
                    this.OnTestChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
